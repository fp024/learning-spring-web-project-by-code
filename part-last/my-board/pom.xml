<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.fp024</groupId>
    <artifactId>study-dependencies-parent</artifactId>
    <version>1.0.0-BUILD-SNAPSHOT</version>
    <relativePath>../../study-dependencies-parent/pom.xml</relativePath>
  </parent>

  <artifactId>my-board</artifactId>
  <name>${project.artifactId}</name>
  <packaging>war</packaging>

  <!-- Spring 6 + JPA 3.0 기반 버전 프로퍼티는 하위 프로젝트에서 직접 관리 -->
  <properties>
    <org.springframework-version>6.0.2</org.springframework-version>
    <spring-security.version>6.0.0</spring-security.version>

    <hibernate.version>6.1.5.Final</hibernate.version>
    <spring-data-jpa.version>3.0.0</spring-data-jpa.version>
    <querydsl.version>5.0.0</querydsl.version>
    <jakarta.inject-api.version>2.0.1</jakarta.inject-api.version>
    <jakarta.servlet-api.version>6.0.0</jakarta.servlet-api.version>

    <jakarta.servlet.jsp.jstl-api.version>2.0.0</jakarta.servlet.jsp.jstl-api.version>
    <jakarta.servlet.jsp.jstl.version>2.0.0</jakarta.servlet.jsp.jstl.version>

    <java-time-jsptags.version>2.0.0</java-time-jsptags.version>

    <assertj.version>3.23.1</assertj.version>

    <!-- Jetty 12 버전이 나오면 바꿀 것. -->
    <jetty.version>11.0.12</jetty.version>

    <!-- Tomcat 10.1.x는 Servlet 6.0을 정식 지원함. -->
    <cargo-tomcat.containerId>tomcat10x</cargo-tomcat.containerId>
    <cargo-tomcat.version>10.1.1</cargo-tomcat.version>
  </properties>

  <!-- web.xml에서 경로 변화를 주기위해, profile을 윈도우와 리눅스 환경으로 나눠보았다. -->
  <profiles>
    <profile>
      <id>win</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <env>win</env>
        <web-xml-location>${project.basedir}/src/main/webapp/WEB-INF/web.xml</web-xml-location>
      </properties>
    </profile>

    <profile>
      <id>linux</id>
      <activation>
        <os>
          <family>linux</family>
        </os>
      </activation>
      <properties>
        <env>linux</env>
        <web-xml-location>${project.basedir}/src/main/webapp/WEB-INF/web-${env}.xml
        </web-xml-location>
      </properties>

      <build>
        <resources>
          <resource>
            <directory>src/main/resources/${env}</directory>
          </resource>
          <resource>
            <directory>src/main/resources</directory>
            <excludes>
              <exclude>project-data.properties</exclude>
            </excludes>
          </resource>
        </resources>
      </build>
    </profile>

    <!-- 기본 웹 애플리케이션 실행 : jetty 또는 tomcat -->
    <!-- 부모 pom.xml 에도 있는 설정이지만, 설정을 조금씩 바꿔야할지몰라서 일단은 하위에도 내려놓자~ -->
    <profile>
      <id>default-webapp-run</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <!-- Jetty 서버 구동 -->
          <!-- 도움말 자세히보기: mvnw jetty:help -Ddetail=true -Dgoal=run -->
          <plugin>
            <!-- https://www.eclipse.org/jetty/documentation/jetty-10/programming-guide/index.html#jetty-maven-plugin -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>${jetty.version}</version>
            <configuration>
              <httpConnector>
                <!--host>localhost</host-->
                <port>${jetty.port}</port>
              </httpConnector>
              <webApp>
                <contextPath>${jetty-context-path}</contextPath>
                <descriptor>${web-xml-location}</descriptor>
                <sessionHandler>
                  <sessionIdPathParameterName>none</sessionIdPathParameterName>
                </sessionHandler>
              </webApp>
              <deployMode>EMBED</deployMode>
              <stopKey>CTRL+C</stopKey>
              <stopPort>8999</stopPort>
              <!-- 9.x 설정: <scanIntervalSeconds> 대신 <scan> 사용 -->
              <!--
                변경 감지 자동 재시작시 ContextLoaderListener가 제대로 실행되지 않는 오류가 발생한다.
                설정을 -1로하여 자동 재시작이 일어나지 않도록 한다.
               -->
              <scan>${jetty-auto-deploy-seconds}</scan>
              <scanTargetPatterns>
                <scanTargetPattern>
                  <directory>src/main/webapp/WEB-INF</directory>
                  <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                  </includes>
                  <excludes>
                    <exclude>**/*.jsp</exclude>
                  </excludes>
                </scanTargetPattern>
              </scanTargetPatterns>
            </configuration>
          </plugin>

          <!-- 실제 Tomcat 9 배포 실행 테스트 -->
          <!-- mvn clean package -DskipTests cargo:run -->
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>${cargo.version}</version>
            <configuration>
              <container>
                <containerId>${cargo-tomcat.containerId}</containerId>
                <systemProperties>
                  <file.encoding>UTF-8</file.encoding>
                </systemProperties>
                <zipUrlInstaller>
                  <url>
                    https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/${cargo-tomcat.version}/tomcat-${cargo-tomcat.version}.zip
                  </url>
                  <downloadDir>${project.build.directory}/downloads</downloadDir>
                  <extractDir>${project.build.directory}/extracts</extractDir>
                </zipUrlInstaller>
              </container>
              <configuration>
                <type>standalone</type>
                <properties>
                  <cargo.servlet.port>${cargo-server-port}</cargo.servlet.port>
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <type>war</type>
                  <properties>
                    <context>${cargo-context-path}</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Scouter를 활성화하여 웹 애플리케이션 실행 : jetty 또는 tomcat -->
    <profile>
      <id>webapp-run-with-scouter</id>
      <build>
        <plugins>
          <!-- Jetty 서버 구동 -->
          <!-- 도움말 자세히보기: mvnw jetty:help -Ddetail=true -Dgoal=run -->
          <plugin>
            <!-- https://www.eclipse.org/jetty/documentation/jetty-10/programming-guide/index.html#jetty-maven-plugin -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>${jetty.version}</version>
            <configuration>
              <httpConnector>
                <!--host>localhost</host-->
                <port>${jetty.port}</port>
              </httpConnector>
              <!-- jvmArgs는 FORK 모드에서만 동작한다. -->
              <jvmArgs><!--
                  -->-javaagent:${scouter.agent.lib} <!--
                  -->--illegal-access=warn <!--
                  -->--add-opens=java.base/java.lang=ALL-UNNAMED <!--
                  -->-Djdk.attach.allowAttachSelf=true <!--
                  -->-Dscouter.config=${project.basedir}/../../${scouter.config.file} <!--
              --></jvmArgs>
              <webApp>
                <contextPath>${jetty-context-path}</contextPath>
                <descriptor>${web-xml-location}</descriptor>
                <sessionHandler>
                  <sessionIdPathParameterName>none</sessionIdPathParameterName>
                </sessionHandler>
              </webApp>
              <deployMode>FORK</deployMode>
              <stopKey>CTRL+C</stopKey>
              <stopPort>8999</stopPort>
              <!-- 9.x 설정: <scanIntervalSeconds> 대신 <scan> 사용 -->
              <!--
                변경 감지 자동 재시작시 ContextLoaderListener가 제대로 실행되지 않는 오류가 발생한다.
                설정을 -1로하여 자동 재시작이 일어나지 않도록 한다.
               -->
              <scan>${jetty-auto-deploy-seconds}</scan>
              <scanTargetPatterns>
                <scanTargetPattern>
                  <directory>src/main/webapp/WEB-INF</directory>
                  <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                  </includes>
                  <excludes>
                    <exclude>**/*.jsp</exclude>
                  </excludes>
                </scanTargetPattern>
              </scanTargetPatterns>
            </configuration>
          </plugin>

          <!-- 실제 Tomcat 9 배포 실행 테스트 -->
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>${cargo.version}</version>
            <configuration>
              <container>
                <containerId>${cargo-tomcat.containerId}</containerId>
                <systemProperties>
                  <file.encoding>UTF-8</file.encoding>
                  <scouter.config>${project.basedir}/../../${scouter.config.file}</scouter.config>
                </systemProperties>
                <zipUrlInstaller>
                  <url>
                    https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/${cargo-tomcat.version}/tomcat-${cargo-tomcat.version}.zip
                  </url>
                  <downloadDir>${project.build.directory}/downloads</downloadDir>
                  <extractDir>${project.build.directory}/extracts</extractDir>
                </zipUrlInstaller>
              </container>
              <configuration>
                <type>standalone</type>
                <properties>
                  <cargo.jvmargs><!--
                  -->-javaagent:${scouter.agent.lib} <!--
                  -->--illegal-access=warn <!--
                  -->--add-opens=java.base/java.lang=ALL-UNNAMED <!--
                  -->-Djdk.attach.allowAttachSelf=true <!--
                  --></cargo.jvmargs>
                  <cargo.servlet.port>${cargo-server-port}</cargo.servlet.port>
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <type>war</type>
                  <properties>
                    <context>${cargo-context-path}</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <!-- Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${org.springframework-version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${org.springframework-version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-orm</artifactId>
      <version>${org.springframework-version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>${org.springframework-version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${org.springframework-version}</version>
    </dependency>


    <!-- Spring Security -->
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-web</artifactId>
      <version>${spring-security.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-config</artifactId>
      <version>${spring-security.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-core</artifactId>
      <version>${spring-security.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-taglibs</artifactId>
      <version>${spring-security.version}</version>
    </dependency>


    <!-- AspectJ -->
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${org.aspectj-version}</version>
    </dependency>

    <!-- Logging -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
    </dependency>
    <!-- Apache Log4j SLF4J Binding  -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j2-impl</artifactId>
    </dependency>

    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>${jakarta.servlet-api.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>jakarta.servlet.jsp.jstl</groupId>
      <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
      <version>${jakarta.servlet.jsp.jstl-api.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.glassfish.web</groupId>
      <artifactId>jakarta.servlet.jsp.jstl</artifactId>
      <version>${jakarta.servlet.jsp.jstl.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- https://github.com/sargue/java-time-jsptags -->
    <dependency>
      <groupId>net.sargue</groupId>
      <artifactId>java-time-jsptags</artifactId>
      <version>${java-time-jsptags.version}</version>
    </dependency>

    <!-- Database -->
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>${hsqldb.version}</version>
    </dependency>

    <!-- JPA -->
    <dependency>
      <groupId>org.hibernate.orm</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>${hibernate.version}</version>
    </dependency>

    <dependency>
      <groupId>org.hibernate.orm</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
      <version>${hibernate.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.data</groupId>
      <artifactId>spring-data-jpa</artifactId>
      <version>${spring-data-jpa.version}</version>
    </dependency>

    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-jpa</artifactId>
      <version>${querydsl.version}</version>
      <classifier>jakarta</classifier>
    </dependency>

    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-codegen</artifactId>
      <version>${querydsl.version}</version>
    </dependency>

    <dependency>
      <groupId>com.querydsl</groupId>
      <artifactId>querydsl-apt</artifactId>
      <version>${querydsl.version}</version>
      <classifier>jakarta</classifier>
      <scope>provided</scope>
    </dependency>

    <!-- hibernate-jpamodelgen 추가 후 반드시 필요한 모듈 -->
    <!--
      hibernate-core로 부터 가져오는
      com.sun.activation:jakarta.activation:jar:2.0.1 의 중복을 피하기위해
      이전버전 (3.0.1)을 쓰기로 함.
    -->
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
      <version>3.0.1</version>
    </dependency>

    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>${gson.version}</version>
    </dependency>

    <dependency>
      <groupId>net.coobird</groupId>
      <artifactId>thumbnailator</artifactId>
      <version>${thumbnailator.version}</version>
    </dependency>

    <!-- lombok -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>${org.springframework-version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <version>${spring-security.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JSON 검증을 json-path 로도 해봤던 것 같은데, test 스코프로 추가해두자! -->
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <version>${json-path.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>
  <build>
    <pluginManagement>
      <plugins>
        <!-- 이 플러그인의 구성은 Eclipse m2e 설정만 저장하는 데 사용되고, Maven 빌드 자체에는 영향을 
            미치지 않음. toolchain 동작이 eclipse m2e에서는 의미가 없음. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      org.apache.maven.plugins
                    </groupId>
                    <artifactId>
                      maven-toolchains-plugin
                    </artifactId>
                    <versionRange>
                      [1.1,)
                    </versionRange>
                    <goals>
                      <goal>toolchain</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                    <!-- Eclipse m2e 동작에서는 무시 처리 -->
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <!-- maven-compiler-plugin 3.10.1 환경에서는 따로 설정하지 않아도 어노테이션 프로세서가 잘 동작한다. -->
      <!--
      <plugin>
        <groupId>com.mysema.maven</groupId>
        <artifactId>apt-maven-plugin</artifactId>
        <version>1.1.3</version>
        <executions>
          <execution>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <outputDirectory>target/generated-sources/java</outputDirectory>
              <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
            </configuration>
          </execution>
        </executions>
      </plugin>
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <compilerArgs>
            <arg>-Xlint:all</arg>
            <arg>-Xlint:-processing
            </arg> <!-- No processor claimed any of these annotations 경고는 노출되지않게 설정 -->
            <arg>-Xlint:-path</arg> <!-- bad path element 경고 무시 -->
            <arg>-parameters</arg>
          </compilerArgs>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${maven-war-plugin.version}</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>