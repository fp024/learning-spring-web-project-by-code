<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.fp024</groupId>
  <artifactId>study-dependencies-parent</artifactId>
  <name>${project.artifactId}</name>
  <packaging>pom</packaging>
  <version>1.0.0-BUILD-SNAPSHOT</version>
  <properties>
    <java.version>17</java.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>

    <javax.servlet-api.version>4.0.1</javax.servlet-api.version>
    <javax.servlet.jsp-api.version>2.3.3</javax.servlet.jsp-api.version>
    <jstl.version>1.2</jstl.version>
    <javax.annotation-api.version>1.3.2</javax.annotation-api.version>

    <org.springframework-version>5.3.28</org.springframework-version>

    <spring-security.version>5.8.4</spring-security.version>

    <org.aspectj-version>1.9.19</org.aspectj-version>

    <quartz.version>2.3.2</quartz.version>

    <jackson.version>2.15.2</jackson.version>
    <!-- 마이크로 보안 패치가 있을때, jackson-databind 만 패치되기도 함. 
         jackson-databind는 별도로 분리해두는게 낫겠다. -->
    <jackson-databind.version>${jackson.version}</jackson-databind.version>
    <gson.version>2.10.1</gson.version>

    <log4j2.version>2.20.0</log4j2.version>

    <lombok.version>1.18.28</lombok.version>

    <mybatis.version>3.5.13</mybatis.version>
    <mybatis.spring.version>2.1.1</mybatis.spring.version>
    <mybatis.dynamic.sql.version>1.5.0</mybatis.dynamic.sql.version>

    <hikaricp.version>5.0.1</hikaricp.version>

    <!-- 
      설치해서 사용중인 Oracle DB 버전이 XE 18.3이여서, 드라이버 버전도 동일하게 두었었는데, 
      최신버전을 쓰더라도 특별한 문제는 없었다.
      https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11
    -->
    <ojdbc11.version>23.2.0.0</ojdbc11.version>

    <!-- 몇몇 프로젝트에서는 hsqldb로 사용해보자... -->
    <hsqldb.version>2.7.1</hsqldb.version>

    <thumbnailator.version>0.4.19</thumbnailator.version>
    <!-- 
      1. web.xml기반 설정 프로젝트에서 소스파일 변경으로 Jetty의 자동재시작이 일어날때, 
         예외가 발생하여, 9.x에서 10.x로 버전업 해봤는데, 버전 문제는 아닌 것 같다.
         버전업을 해도 원인은 동일함, JavaConfig 설정으로 사용하는 프로젝트에서는 오류가 발생하지 않고 정상 재시작한다..
    
         https://github.com/eclipse/jetty.project/issues/4076
              
      2. Jetty 11.x버전은 주요 서블릿 패키지명이 바뀌였기 때문에 Spring 5에서 사용할 수 없다.          
         https://stackoverflow.com/questions/66217350/deploying-spring-5-x-on-tomcat-10-x-with-jakarta-package        
    -->
    <jetty.version>10.0.15</jetty.version>

    <junit.jupiter.version>5.9.3</junit.jupiter.version>

    <json-path.version>2.8.0</json-path.version>

    <mockito.version>5.4.0</mockito.version>

    <hamcrest.version>2.2</hamcrest.version>
    
    <assertj.version>3.24.2</assertj.version>

    <!-- 2.0.0 부터는 Servlet 5.0이상, Java 17이 요구사항이다. 1.1.4 버전을 유지한다. -->
    <java-time-jsptags.version>1.1.4</java-time-jsptags.version>

    <commons-fileupload.version>1.5</commons-fileupload.version>

    <!-- Maven 플러그인 버전 관리 -->
    <mybatis-generator-maven-plugin.version>1.4.2</mybatis-generator-maven-plugin.version>
    <maven-war-plugin.version>3.4.0</maven-war-plugin.version>
    <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
    <maven-surefire-plugin.version>3.1.2</maven-surefire-plugin.version>
    <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
    <maven-toolchains-plugin.version>3.1.0</maven-toolchains-plugin.version>

    <!-- Jetty일 때는 provided, Tomcat일 때는 compile로 설정하기위해 프로퍼티로 분리했다. -->
    <jstl-scope.type>provided</jstl-scope.type>
    
    <!-- Jetty Http 포트 기본값 -->
    <jetty.port>8080</jetty.port>
    <!-- Jetty Context Path 설정 기본값 -->
    <jetty-context-path>/</jetty-context-path>
    <!-- XML 컨텍스트 설정일 때는 잘 되는데, Spring Java Config 설정일 때는 예외가 난다. 일단 자동 재배포 재시작의 기본 값은 비활성화 상태로 두자 -->
    <jetty-auto-deploy-seconds>-1</jetty-auto-deploy-seconds>

    <!-- Embedded Jetty로 실행할 때, web.xml을 환경별로 바꿀 상황이 생겨 환경변수로 분리했다.  -->
    <web-xml-location>${project.basedir}/src/main/webapp/WEB-INF/web.xml</web-xml-location>

    <!-- cargo 플러그인 설정 -->
    <cargo.version>1.10.8</cargo.version>
    <cargo-tomcat.containerId>tomcat9x</cargo-tomcat.containerId>
    <cargo-tomcat.version>9.0.76</cargo-tomcat.version>
    <cargo-context-path>${jetty-context-path}</cargo-context-path>
    <cargo-server-port>${jetty.port}</cargo-server-port>
  </properties>


  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-bom</artifactId>
        <version>${log4j2.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.jupiter.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP</artifactId>
        <version>${hikaricp.version}</version>
        <exclusions>
          <exclusion>
            <!-- slf4j-api 2.0.0-alpha1 버전을 가져오는데... -->
            <!-- 2.0.0 정식 버전을 끌고오게 되더라도 모듈을 불러오는 모습을 보인다. -->
            <!-- HikariCP의 slf4j-api 디펜던시는 제외시켰다. -->
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <!-- Jetty 기본 웹 애플리케이션 실행  -->
    <profile>
      <id>jetty-run</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <jstl-scope.type>provided</jstl-scope.type>
      </properties>
      <build>
        <plugins>
          <!-- Jetty 서버 구동 -->
          <!-- 도움말 자세히보기: mvnw jetty:help -Ddetail=true -Dgoal=run -->
          <plugin>
            <!-- https://www.eclipse.org/jetty/documentation/jetty-10/programming-guide/index.html#jetty-maven-plugin -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>${jetty.version}</version>
            <configuration>
              <httpConnector>
                <!--host>localhost</host-->
                <port>${jetty.port}</port>
              </httpConnector>
              <webApp>
                <contextPath>${jetty-context-path}</contextPath>
                <descriptor>${web-xml-location}</descriptor>
                <sessionHandler>
                  <sessionIdPathParameterName>none</sessionIdPathParameterName>
                </sessionHandler>
              </webApp>
              <deployMode>EMBED</deployMode>
              <stopKey>CTRL+C</stopKey>
              <stopPort>8999</stopPort>
              <!-- 9.x 설정: <scanIntervalSeconds> 대신 <scan> 사용 -->
              <!-- 
                변경 감지 자동 재시작시 ContextLoaderListener가 제대로 실행되지 않는 오류가 발생한다.
                설정을 -1로하여 자동 재시작이 일어나지 않도록 한다.
               -->
              <scan>${jetty-auto-deploy-seconds}</scan>
              <scanTargetPatterns>
                <scanTargetPattern>
                  <directory>src/main/webapp/WEB-INF</directory>
                  <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                  </includes>
                  <excludes>
                    <exclude>**/*.jsp</exclude>
                  </excludes>
                </scanTargetPattern>
              </scanTargetPatterns>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Tomcat 기본 웹 애플리케이션 실행  -->
    <profile>
      <id>tomcat-run</id>
      <properties>
        <jstl-scope.type>compile</jstl-scope.type>
      </properties>
      <build>
        <plugins>
          <!-- 실제 Tomcat 배포 실행 테스트 -->
          <!-- mvn clean package -Ptomcat-run -DskipTests cargo:run -->
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>${cargo.version}</version>
            <configuration>
              <container>
                <containerId>${cargo-tomcat.containerId}</containerId>
                <systemProperties>
                  <file.encoding>UTF-8</file.encoding>
                </systemProperties>
                <zipUrlInstaller>
                  <url>
                    https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/${cargo-tomcat.version}/tomcat-${cargo-tomcat.version}.zip
                  </url>
                  <downloadDir>${project.build.directory}/downloads</downloadDir>
                  <extractDir>${project.build.directory}/extracts</extractDir>
                </zipUrlInstaller>
              </container>
              <configuration>
                <type>standalone</type>
                <properties>
                  <cargo.servlet.port>${cargo-server-port}</cargo.servlet.port>
                  <!-- Ctrl + C로 외부 Cargo 프로세스가 대기하지 않고 백그라운드 실행이 되야할 것 같은데,  원하는대로 안된다. ㅠㅠ -->
                  <!-- https://codehaus-cargo.github.io/cargo/Container+Start.html -->
                  <!-- <cargo.process.spawn>true</cargo.process.spawn> -->
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <type>war</type>
                  <properties>
                    <context>${cargo-context-path}</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Jetty - Scouter를 활성화하여 웹 애플리케이션 실행 -->
    <profile>
      <id>jetty-run-with-scouter</id>
      <properties>
        <jstl-scope.type>provided</jstl-scope.type>
      </properties>
      <build>
        <plugins>
          <!-- Jetty 서버 구동 -->
          <!-- 도움말 자세히보기: mvnw jetty:help -Ddetail=true -Dgoal=run -->
          <plugin>
            <!-- https://www.eclipse.org/jetty/documentation/jetty-10/programming-guide/index.html#jetty-maven-plugin -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>${jetty.version}</version>
            <configuration>
              <httpConnector>
                <!--host>localhost</host-->
                <port>${jetty.port}</port>
              </httpConnector>
              <!-- jvmArgs는 FORK 모드에서만 동작한다. -->
              <jvmArgs><!-- 
                  -->-javaagent:${scouter.agent.lib} <!--
                  -->--illegal-access=warn <!--
                  -->--add-opens=java.base/java.lang=ALL-UNNAMED <!--
                  -->-Djdk.attach.allowAttachSelf=true <!--
                  -->-Dscouter.config=${project.basedir}/../../${scouter.config.file} <!--
              --></jvmArgs>
              <webApp>
                <contextPath>${jetty-context-path}</contextPath>
                <descriptor>${web-xml-location}</descriptor>
                <sessionHandler>
                  <sessionIdPathParameterName>none</sessionIdPathParameterName>
                </sessionHandler>
              </webApp>
              <deployMode>FORK</deployMode>
              <stopKey>CTRL+C</stopKey>
              <stopPort>8999</stopPort>
              <!-- 9.x 설정: <scanIntervalSeconds> 대신 <scan> 사용 -->
              <!-- 
                변경 감지 자동 재시작시 ContextLoaderListener가 제대로 실행되지 않는 오류가 발생한다.
                설정을 -1로하여 자동 재시작이 일어나지 않도록 한다.
               -->
              <scan>${jetty-auto-deploy-seconds}</scan>
              <scanTargetPatterns>
                <scanTargetPattern>
                  <directory>src/main/webapp/WEB-INF</directory>
                  <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                  </includes>
                  <excludes>
                    <exclude>**/*.jsp</exclude>
                  </excludes>
                </scanTargetPattern>
              </scanTargetPatterns>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Tomcat - Scouter를 활성화하여 웹 애플리케이션 실행 -->
    <profile>
      <id>tomcat-run-with-scouter</id>
      <properties>
        <jstl-scope.type>compile</jstl-scope.type>
      </properties>
      <build>
        <plugins>
          <!-- 실제 Tomcat  배포 실행 테스트 -->
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>${cargo.version}</version>
            <configuration>
              <container>
                <containerId>${cargo-tomcat.containerId}</containerId>
                <systemProperties>
                  <file.encoding>UTF-8</file.encoding>
                  <scouter.config>${project.basedir}/../../${scouter.config.file}</scouter.config>
                </systemProperties>
                <zipUrlInstaller>
                  <url>
                    https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/${cargo-tomcat.version}/tomcat-${cargo-tomcat.version}.zip
                  </url>
                  <downloadDir>${project.build.directory}/downloads</downloadDir>
                  <extractDir>${project.build.directory}/extracts</extractDir>
                </zipUrlInstaller>
              </container>
              <configuration>
                <type>standalone</type>
                <properties>
                  <cargo.jvmargs><!-- 
                  -->-javaagent:${scouter.agent.lib} <!--
                  -->--illegal-access=warn <!--
                  -->--add-opens=java.base/java.lang=ALL-UNNAMED <!--
                  -->-Djdk.attach.allowAttachSelf=true <!--
                  --></cargo.jvmargs>
                  <cargo.servlet.port>${cargo-server-port}</cargo.servlet.port>
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <type>war</type>
                  <properties>
                    <context>${cargo-context-path}</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>       
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven-resources-plugin.version}</version>
        </plugin>
        <!-- JUnit 5 사용을 위해서 maven-surefire-plugin 버전을 올려두자! -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>${maven-war-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <compilerArgs>
            <arg>-Xlint:all</arg>
            <arg>-Xlint:-processing</arg> <!-- No processor claimed any of these annotations 경고는 노출되지않게 설정 -->
            <arg>-Xlint:-path</arg> <!-- bad path element 경고 무시 -->
          </compilerArgs>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-toolchains-plugin</artifactId>
        <version>${maven-toolchains-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>toolchain</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <toolchains>
            <jdk>
              <version>${java.version}</version>
            </jdk>
          </toolchains>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
